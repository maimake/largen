<?php

namespace <%=namespace%>;

use GuzzleHttp\Exception\ClientException;
use Illuminate\Validation\ValidationException;
use Maimake\Largen\Support\Clients\HttpClientBase as HttpClient;
use Maimake\Largen\Support\Exceptions\HttpClientException;
use Maimake\Largen\Support\Exceptions\NotImplementedException;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Psr7\Response;
use Psr\Http\Message\ResponseInterface;

class <%=classname%> extends HttpClient
{
    const BASE_URL = 'https://api.github.com';

    protected $user;
    protected $pwd;
    protected $token;

    public function __construct(string $user='', string $pwd='', string $token = '')
    {
        parent::__construct(false, [
            'base_uri' => self::BASE_URL,
            RequestOptions::COOKIES => true,
            RequestOptions::TIMEOUT => 60,
            RequestOptions::HEADERS => [
                'Accept' => 'application/json',
                'User-Agent' => 'App/2.1.0 (iPhone; iOS 10.2.1; Scale/3.00)',
            ],
        ], get_logger('<%=classname%>'));

        $this->user = $user;
        $this->pwd = $pwd;
        $this->token = $token;
    }

    protected function apiCall($httpMethod, $path, $query = [], $data = [], $headers = [])
    {
        $request_type = RequestOptions::JSON;

        $extraQuery = [
            'timestamp' => time(),
        ];
        $extraData = [
            'platform' => 'ios',
        ];
        $extraHeaders = [
        ];
        $token = $this->token;
        if (filled($token)){
            $extraHeaders['Authorization'] = "Bearer $token";
        }

        $query = array_merge($extraQuery, $query);
        $data = array_merge($extraData, $data);
        $headers = array_merge($extraHeaders, $headers);
        try{
            /** @var Response $response */
            list($response, $body) = $this->_apiCall($httpMethod, $path, $query, $data, $request_type, $headers);

            if(!$this->isSuccess($response, $body))
            {
                $body = $this->handleLogicException($response, $body);
            }
        } catch (ClientException $e) {
            $response = $e->getResponse();
            $body = $this->getBodyFromResponse($response);
            $body = $this->handleClientException($response, $body);
        }

        return $body;
    }

    protected function isSuccess(ResponseInterface $response, $response_data)
    {
        // TODO: Implement isSuccess() method.
        return true;
    }

    protected function getErrorMsg(ResponseInterface $response, $response_data)
    {
        // TODO: Implement getErrorMsg() method.
        return $response_data['message'];
    }

    protected function handleClientException($response, $body)
    {
        if ($response->getStatusCode() == 422)
        {
            throw ValidationException::withMessages($body['errors']);
        }
        throw new HttpClientException($this->getErrorMsg($response, $body), $response->getStatusCode(), $body);
    }

    protected function handleLogicException($response, $body)
    {
        throw new HttpClientException($this->getErrorMsg($response, $body), $response->getStatusCode(), $body);
    }



    /************
     *  Login
     *************/

    protected function isLogined()
    {
        throw new NotImplementedException();
    }

    protected function login()
    {
        throw new NotImplementedException();
    }

    /************
     *  APIs
     *************/


    public function example()
    {
        $body = $this->get('users/maimake', [], get_defined_vars());
        return $body;
    }

    public function exampleRequireLogin()
    {
        $this->requireLogin();
        $body = $this->get('users/maimake', [], get_defined_vars());
        return $body;
    }
}
